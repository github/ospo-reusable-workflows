---
name: "Release"

on:
  workflow_call:
    inputs:
      publish:
        required: false
        type: boolean
        default: true
      release-config-name:
        required: true
        type: string
        default: release-drafter.yml
      create-image:
        required: false
        type: boolean
      image-name:
        required: false
        type: string
      create-discussion:
        required: false
        type: boolean
    secrets:
      github-token:
        required: true
      image-registry:
        required: false
      image-registry-username:
        required: false
      image-registry-password:
        required: false
      discussion-repository-id:
        required: false
      discussion-category-id:
        required: false

permissions:
  contents: read

jobs:
  create_release:
    # release if
    # manual deployment OR
    # merged to main and labelled with release labels
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event.pull_request.merged == true &&
      (contains(github.event.pull_request.labels.*.name, 'breaking') ||
      contains(github.event.pull_request.labels.*.name, 'feature') ||
      contains(github.event.pull_request.labels.*.name, 'vuln') ||
      contains(github.event.pull_request.labels.*.name, 'release')))
    outputs:
      full-tag: ${{ steps.release-drafter.outputs.tag_name }}
      short-tag: ${{ steps.get_tag_name.outputs.SHORT_TAG }}
      body: ${{ steps.release-drafter.outputs.body }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - uses: release-drafter/release-drafter@3f0f87098bd6b5c5b9a36d49c41d998ea58f9348
        id: release-drafter
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        with:
          config-name: ${{ inputs.release-config-name }}
          publish: ${{ inputs.publish }}
      - name: Get the Short Tag
        id: get_tag_name
        run: |
          short_tag=$(echo ${{ steps.release-drafter.outputs.tag_name }} | cut -d. -f1)
          echo "SHORT_TAG=$short_tag" >> "$GITHUB_OUTPUT"
  create_action_images:
    if: ${{ inputs.create-image }}
    needs: create_release
    runs-on: ubuntu-latest
    permissions:
      packages: write
    env:
      IMAGE_REGISTRY: ${{ secrets.image-registry }}
      IMAGE_REGISTRY_USERNAME: ${{ secrets.image-registry-username }}
      IMAGE_REGISTRY_PASSWORD: ${{ secrets.image-registry-password }}
    steps:
      - name: Check for Image Name
        if: ${{ inputs.image-name == '' }}
        run: |
          echo "image-name input is not set"
          exit 1
      - name: Check for Image Registry
        if: ${{ env.IMAGE_REGISTRY == '' }}
        run: |
          echo "image-registry secret is not set"
          exit 1
      - name: Check for Image Registry Username
        if: ${{ env.IMAGE_REGISTRY_USERNAME == '' }}
        run: |
          echo "image-registry-username secret is not set"
          exit 1
      - name: Check for Image Registry Password
        if: ${{ env.IMAGE_REGISTRY_PASSWORD == '' }}
        run: |
          echo "image-registry-password secret is not set"
          exit 1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5
      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.IMAGE_REGISTRY_USERNAME }}
          password: ${{ env.IMAGE_REGISTRY_PASSWORD}}
      - uses: actions/checkout@v4.2.2
      - name: Push Docker Image
        if: ${{ success() }}
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ inputs.image-name }}:latest
            ${{ env.IMAGE_REGISTRY }}/${{ inputs.image-name }}:${{ needs.create_release.outputs.full-tag }}
            ${{ env.IMAGE_REGISTRY }}/${{ inputs.image-name }}:${{ needs.create_release.outputs.short-tag }}
          platforms: linux/amd64
          provenance: false
          sbom: false
  create_discussion:
    if: ${{ inputs.create-discussion == true }}
    needs: create_release
    runs-on: ubuntu-latest
    permissions:
      discussions: write
    env:
      DISCUSSION_REPOSITORY_ID: ${{ secrets.release-discussion-repository-id }}
      DISCUSSION_CATEGORY_ID: ${{ secrets.release-discussion-category-id }}
    steps:
      - name: Check for Discussion Repository ID
        if: ${{ env.DISCUSSION_REPOSITORY_ID  == '' }}
        run: |
          echo "discussion-repository-id secret is not set"
          exit 1
      - name: Check for Discussion Category ID
        if: ${{ env.DISCUSSION_CATEGORY_ID == '' }}
        run: |
          echo "discussion-category-id secret is not set"
          exit 1
      - name: Create an Announcement Discussion for Release
        uses: abirismyname/create-discussion@6e6ef67e5eeb042343ef8b3d8d0f5d545cbdf024
        env:
          GH_TOKEN: ${{ secrets.github-token }}
        with:
          title: ${{ needs.create_release.outputs.full-tag }}
          body: ${{ needs.create_release.outputs.body }}
          repository-id: ${{ secrets.discussion-repository-id }}
          category-id: ${{ secrets.discussion-category-id }}
