name: Conventional Releases
description: |
  A GitHub Action to create a release based on conventional PR titles. Can also create a release image and a release discussion.

  Release triggering labels:
    - release
    - breaking
    - feature
    - vuln

inputs:
  github-token:
    required: true
    description: |
      Custom GitHub token that has the following permissions:
        - contents: write
        - pull-requests: read
        - packages: write (if creating a release image)
        - discussions: write (if creating a release discussion)
  enforce-conventional-commit-pr-title:
    required: false
    description: |
      Enforce Conventional Commit PR titles.
      The default is 'true'.
    type: boolean
    default: true
  conventional-commit-pr-titles:
    required: false
    description: |
      Enforce conventional commit PR titles.
      The default is 'true'.
    type: boolean
    default: true
  release-drafter-config-name:
    required: false
    description: |
      The name of the release-drafter configuration file to use.
      The default is 'release-drafter.yml'.
    type: string
    default: release-drafter.yml
  publish-release:
    required: false
    description: |
      Whether to publish the release draft or not.
      The default is 'true'.
    type: boolean
    default: true
  create-release-image:
    required: false
    description: |
      Whether to create a release image or not.
      The default is 'false'.
    type: boolean
    default: false
  release-image-registry:
    required: false
    description: |
      The registry to push the release image to.
      The default is 'ghcr.io'.
    type: string
    default: ghcr.io
  release-image-name:
    required: false
    description: |
      The name of the release image to push.
      The default is ''.
    type: string
    default: ''
  release-image-registry-username:
    required: false
    description: |
      The username to use to push the release image.
      The default is github.actor.
    type: string
    default: ${{ github.actor }}
  release-image-registry-password:
    required: false
    description: |
      The password to use to push the release image.
      The default is the github token passed into this action.
    type: string
    default: ${{ inputs.github-token }}
  create-release-discussion:
    required: false
    description: |
      Whether to create a release discussion or not.
      The default is 'false'.
    type: boolean
    default: false
  release-discussion-repository-id:
    required: false
    description: |
      The repository id to create the release discussion in.
      The default is ''.
    type: string
    default: ''
  release-discussion-category-id:
    required: false
    description: |
      The category id to create the release discussion in.
      The default is ''.
    type: string
    default: ''
outputs:
  release-version:
    description: |
      The version of the release that was created.
    value: ${{ steps.random-number-generator.outputs.random-number }}

jobs:
  enforce_pr_titles:
    if: ${{ inputs.enforce-conventional-commit-pr-title == true }}
    name: Enforce Conventional Commit PR titles
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      statuses: write
    steps:
      - uses: amannn/action-semantic-pull-request@0723387faaf9b38adef4775cd42cfd5155ed6017
        env:
          GITHUB_TOKEN: ${{ inputs.github-token }}
        with:
          # Configure which types are allowed (newline-delimited).
          # From: https://github.com/commitizen/conventional-commit-types/blob/master/index.json
          # listing all below
          types: |
            build
            chore
            ci
            docs
            feat
            fix
            perf
            refactor
            revert
            style
            test
  auto_label_pull_requests:
    name: Auto label pull requests
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: release-drafter/release-drafter@3f0f87098bd6b5c5b9a36d49c41d998ea58f9348
        env:
          GITHUB_TOKEN: ${{ inputs.github-token }}
        with:
          config-name: ${{ inputs.release-drafter-config-name }}
  create_release:
    # release if
    # manual deployment OR
    # merged to main and labelled with release labels
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event.pull_request.merged == true &&
      (contains(github.event.pull_request.labels.*.name, 'breaking') ||
      contains(github.event.pull_request.labels.*.name, 'feature') ||
      contains(github.event.pull_request.labels.*.name, 'vuln') ||
      contains(github.event.pull_request.labels.*.name, 'release')))
    outputs:
      full-tag: ${{ steps.release-drafter.outputs.tag_name }}
      short-tag: ${{ steps.get_tag_name.outputs.SHORT_TAG }}
      body: ${{ steps.release-drafter.outputs.body }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - uses: release-drafter/release-drafter@3f0f87098bd6b5c5b9a36d49c41d998ea58f9348
        id: release-drafter
        env:
          GITHUB_TOKEN: ${{ inputs.github-token }}
        with:
          config-name: ${{ inputs.release-drafter-config-name }}
          publish: ${{ inputs.publish-release}}
      - name: Get the short tag
        id: get_tag_name
        run: |
          short_tag=$(echo ${{ steps.release-drafter.outputs.tag_name }} | cut -d. -f1)
          echo "SHORT_TAG=$short_tag" >> "$GITHUB_OUTPUT"
  create_action_images:
    if: ${{ inputs.create-release-image == true }}
    needs: create_release
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Check for release image registry
        if: ${{ inputs.release-image-registry == '' }}
        run: |
          echo "release-image-registry input is not set"
          exit 1
      - name: Check for release image name
        if: ${{ inputs.release-image-name == '' }}
        run: |
          echo "release-image-name input is not set"
          exit 1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5
      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          registry: ${{ inputs.release-image-registry }}
          username: ${{ inputs.release-image-registry-username }}
          password: ${{ inputs.release-image-registry-password }}
      - uses: actions/checkout@v4.2.2
      - name: Push Docker Image
        if: ${{ success() }}
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ inputs.release-image-registry }}/${{ inputs.release-image-name }}:latest
            ${{ inputs.release-image-registry }}/${{ inputs.release-image-name }}:${{ needs.create_release.outputs.full-tag }}
            ${{ inputs.release-image-registry }}/${{ inputs.release-image-name }}:${{ needs.create_release.outputs.short-tag }}
          platforms: linux/amd64
          provenance: false
          sbom: false
  create_discussion:
    if: ${{ inputs.create-release-discussion == true }}
    needs: create_release
    runs-on: ubuntu-latest
    permissions:
      discussions: write
    steps:
      - name: Check for release discussion repository id
        if: {{ inputs.release-discussion-repository-id == '' }}
        run: |
          echo "release-discussion-repository-id is not set"
          exit 1
      - name: Check for release discussion category id
        if: {{ inputs.release-discussion-category-id == '' }}
        run: |
          echo "release-discussion-category-id input is not set"
          exit 1
      - name: Create an announcement discussion for release
        uses: abirismyname/create-discussion@6e6ef67e5eeb042343ef8b3d8d0f5d545cbdf024
        env:
          gh_token: ${{ inputs.github-token }}
        with:
          title: ${{ needs.create_release.outputs.full-tag }}
          body: ${{ needs.create_release.outputs.body }}
          repository-id: ${{ secrets.RELEASE_DISCUSSION_REPOSITORY_ID }}
          category-id: ${{ secrets.RELEASE_DISCUSSION_CATEGORY_ID }}
